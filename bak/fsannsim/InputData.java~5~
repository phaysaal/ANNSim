/*
 * InputData.java
 *
 * Created on June 7, 2006, 11:55 PM
 */

package fsannsim;
import java.awt.event.*;
import java.awt.*;
import javax.swing.*;
import java.util.*;
import java.io.*;
/**
 *
 * @author  Mahmud
 */
public class InputData extends javax.swing.JInternalFrame implements ActionListener, Serializable{

    JTable tblInput;
    Vector heading;
    Vector rowData;
	JButton btnSave;
	JButton btnInfere;
	Simulator sMain;
    /** Creates new form InputData */
    public InputData(Simulator sMain) {
        super("The Input Data", true, true, true, true);
        initComponents();
        this.sMain = sMain;
        heading = new Vector();
        heading.addElement("Sample #");
        heading.addElement("Input Pattern");
        heading.addElement("Desired Output");
        btnSave = new JButton("Load For Feed");
        btnSave.addActionListener(this);
        btnInfere = new JButton("Load For Infere");
        btnInfere.addActionListener(this);
        rowData = new Vector();
        tblInput = new JTable(rowData, heading);
        getContentPane().add(new JScrollPane(tblInput), BorderLayout.CENTER);

        JPanel pn = new JPanel();
        pn.setLayout(new FlowLayout());
        pn.add(btnSave);
        pn.add(btnInfere);
        getContentPane().add(pn, BorderLayout.SOUTH);

        if(sMain.inputFile != null)
            LoadData();
        setVisible(true);
    }

    public void LoadInputNeuron(){
    	String s = sMain.vinputs;
        String t[] = s.trim().split(""+Main.inputSeperator);
        int i;
        for(i=0; i<t.length; i++){
        	sMain.V[0][i] = Double.parseDouble(t[i]);

        }


        s = sMain.doutputs;
        t = s.trim().split(""+Main.inputSeperator);
        //Desired output
        for(i=0; i<sMain.O; i++){
        	sMain.DO[i] = Double.parseDouble(t[i]);
        }
    }

    public void LoadData(){
        String s, t;
        Vector row;
        if(rowData.size() > 0)
            rowData.clear();
        int i = 1;
        try{
            RandomAccessFile ras = new RandomAccessFile(sMain.inputFile, "r");
            while(ras.getFilePointer() < ras.length()){
                s = ras.readLine();
                t = ras.readLine();
                if(sMain.I == -1) {
                	sMain.I = s.trim().split(""+Main.inputSeperator).length;
                	sMain.O = t.trim().split(""+Main.inputSeperator).length;
            	}
                row = new Vector();
                row.addElement(i+"");
                row.addElement(s); //sMain.vinputs.get(sMain.vinputs.size()-1)
                row.addElement(t);
                //sMain.vinputs.addElement(s);
                //sMain.doutputs.addElement(t);
                rowData.addElement(row);
                i++;
            }
            sMain.vinputs = (String)((Vector)rowData.get(0)).get(1);
    		sMain.doutputs = (String)((Vector)rowData.get(0)).get(2);

            sMain.mnuLoadData.setEnabled(false);
    		sMain.mnuConfigureNetwork.setEnabled(true);
    		sMain.mnuConfigureSimulation.setEnabled(true);
    		sMain.mnuTaskManager.setEnabled(true);

        }catch(Exception e){
            System.out.println(e);
        }
        tblInput.invalidate();
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        //pack();
        setBounds(0, 0, 480, 300);
    }
    // </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */

    public void actionPerformed(ActionEvent ae){
    	if(ae.getSource() == btnSave){
    		sMain.isInfere = false;
    	}
    	else{
    		sMain.isInfere = true;
    	}
    	LoadInputs(tblInput.getSelectedRow());

    }

    public void LoadInputs(int index){
    	sMain.vinputs = (String)((Vector)rowData.get(index)).get(1);
    	sMain.doutputs = (String)((Vector)rowData.get(index)).get(2);
    	LoadInputNeuron();
    }



}
