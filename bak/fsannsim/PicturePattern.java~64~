package fsannsim;

import java.awt.BorderLayout;

import javax.swing.JFrame;
import javax.swing.JTextField;
import java.awt.*;
import javax.swing.JLabel;
import javax.swing.JTabbedPane;
import javax.swing.JSplitPane;
import com.borland.jbcl.layout.BoxLayout2;
import javax.swing.JPanel;
import javax.swing.JButton;
import com.borland.jbcl.layout.XYLayout;
import com.borland.jbcl.layout.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import javax.swing.border.MatteBorder;
import javax.swing.border.Border;
import javax.swing.border.EtchedBorder;
import java.util.Vector;
import javax.swing.text.*;
import java.io.RandomAccessFile;
import java.io.*;

/**
 * <p>Title: Fs ANN Sim</p>
 *
 * <p>Description: Artificial Neural Network Simulator</p>
 *
 * <p>Copyright: Open Source and Open Resource </p>
 *
 * <p>Company: F Sharp</p>
 *
 * @author Mahmudul Faisal Al Ameen
 * @version 1.0
 */
public class PicturePattern extends JFrame {
    RandomAccessFile ras = null;
    public PicturePattern() {
        try {
            jbInit();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }

    private void jbInit() throws Exception {
        getContentPane().setLayout(null);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        ipInput.setBounds(new Rectangle(25, 31, 404, 373));
        ipOutput.setBounds(new Rectangle(441, 31, 387, 372));
        jLabel1.setText("Input Pattern");
        jLabel1.setBounds(new Rectangle(26, 8, 89, 23));
        jLabel2.setText("Desired Output Pattern");
        jLabel2.setBounds(new Rectangle(443, 10, 142, 19));
        btnAdd.setBounds(new Rectangle(456, 560, 83, 23));
        btnAdd.setText("Add");
        btnAdd.addActionListener(new PicturePattern_btnAdd_actionAdapter(this));
        jScrollPane1.setBounds(new Rectangle(26, 412, 802, 134));
        btnClose.setBounds(new Rectangle(751, 560, 83, 23));
        btnClose.setText("Close");
        btnClose.addActionListener(new PicturePattern_btnClose_actionAdapter(this));
        btnSave.setBounds(new Rectangle(653, 560, 83, 23));
        btnSave.setText("Save");
        btnSave.addActionListener(new PicturePattern_btnSave_actionAdapter(this));
        btnLoad.setBounds(new Rectangle(555, 560, 83, 23));
        btnLoad.setText("Load");
        btnLoad.addActionListener(new PicturePattern_btnLoad_actionAdapter(this));
        btnCheck.setBounds(new Rectangle(27, 560, 79, 23));
        btnCheck.setText("Check");
        btnCheck.addActionListener(new PicturePattern_btnCheck_actionAdapter(this));
        this.getContentPane().add(imagePattern2);
        this.getContentPane().add(ipInput);
        this.getContentPane().add(ipOutput);
        this.getContentPane().add(jLabel1);
        this.getContentPane().add(jLabel2);
        this.getContentPane().add(jScrollPane1);
        this.getContentPane().add(btnClose);
        this.getContentPane().add(btnSave);
        this.getContentPane().add(btnLoad);
        this.getContentPane().add(btnAdd);
        this.getContentPane().add(btnCheck);
        jScrollPane1.getViewport().add(txtData);
        imagePattern2.setBounds(new Rectangle(449, 527, 1, 1));
    }

    public static void main(String[] args) {
        PicturePattern picturepattern = new PicturePattern();
        picturepattern.setSize(900, 650);
        picturepattern.setVisible(true);
    }

    Border border1 = new MatteBorder(null);
    Border border2 = BorderFactory.createMatteBorder(6, 6, 6, 6, Color.white);
    Border border3 = BorderFactory.createLineBorder(Color.white, 2);
    Border border4 = BorderFactory.createEtchedBorder(EtchedBorder.RAISED,
            Color.white, new Color(165, 163, 151));
    Border border5 = BorderFactory.createEmptyBorder();
    Border border6 = BorderFactory.createEmptyBorder();
    ImagePattern ipInput = new ImagePattern();
    ImagePattern imagePattern2 = new ImagePattern();
    ImagePattern ipOutput = new ImagePattern();
    JLabel jLabel1 = new JLabel();
    JLabel jLabel2 = new JLabel();
    JButton btnAdd = new JButton();
    JScrollPane jScrollPane1 = new JScrollPane();
    JTextArea txtData = new JTextArea();
    JButton btnClose = new JButton();
    JButton btnSave = new JButton();
    JButton btnLoad = new JButton();
    JButton btnCheck = new JButton();
    public void btnAdd_actionPerformed(ActionEvent e) {
        int cp = txtData.getCaretPosition();
        try {
            if (cp > 0 && cp < txtData.getText().length() &&
                txtData.getText(cp - 1, 1).equals("\n")) {
                txtData.insert(ipInput.getCode() + "\n", cp);
                txtData.insert(ipOutput.getCode() + "\n",
                               cp + ipInput.getCode().length() + 1);
            } else {
                txtData.append(ipInput.getCode() + "\n");
                txtData.append(ipOutput.getCode() + "\n");
            }
        } catch (BadLocationException ex) {
        }

        System.out.print(cp);
    }

    private boolean isDataValid() {
        String str[] = txtData.getText().split("\n");
        int i, j;
        boolean isvalid = true;
        if (str.length == 0 || (str.length % 2) == 1) {
            JOptionPane.showMessageDialog(this,
                                          "Failure: No data set or missing of Input or Output data");
            return false;
        }
        int il = str[0].split(" ").length;
        int ol = str[1].split(" ").length;
        if (il == 0 || ol == 0) {
            JOptionPane.showMessageDialog(this,
                                          "Failure: The data length is 0");
            return false;
        }
        for (i = 2; i < str.length; i += 2) {
            if (str[i].split(" ").length != il) {
                JOptionPane.showMessageDialog(this,
                                              "Failure: The input data length mismatch (" +
                                              i + " line )");
                return false;
            }
            if (str[i + 1].split(" ").length != ol) {
                JOptionPane.showMessageDialog(this,
                                              "Failure: The output data length mismatch (" +
                                              i + " line )");
                return false;
            }
            for (j = i - 2; j >= 0; j--) {
                if (str[j].equals(str[i])) {
                    JOptionPane.showMessageDialog(this,
                                                  "Failure: duplicate input data found ( " +
                                                  i + " and " + j + " line )");
                    return false;
                }
            }
        }
        return true;
    }

    public void btnCheck_actionPerformed(ActionEvent e) {
        if (isDataValid()) {
            JOptionPane.showMessageDialog(this,
                                          "Successfull: The data is valid");
        }
    }

    public void btnLoad_actionPerformed(ActionEvent e) {
        JFileChooser jfc = new JFileChooser();
        jfc.showOpenDialog(this);
        try {
            ras = new RandomAccessFile(jfc.getSelectedFile(), "rws");
            if(ras.length() > 0){
                while(ras.getFilePointer() < ras.length())
                    txtData.append(ras.readLine() + "\n");
            }

        } catch (FileNotFoundException ex) {
        } catch (IOException ex) {
            /** @todo Handle this exception */
            JOptionPane.showMessageDialog(this, ex.toString());
        }
    }

    public void btnSave_actionPerformed(ActionEvent e) {
        if (isDataValid()) {
            if (ras == null) {
                JFileChooser jfc = new JFileChooser();
                jfc.showSaveDialog(this);
                //if (jfc.getSelectedFile() == null) {
                //    JOptionPane.showMessageDialog(this, "File Not Found");
                //    return;
                //}
                try {
                    ras = new RandomAccessFile(jfc.getSelectedFile(), "rws");
                    ras.write(txtData.getText().getBytes());
                    JOptionPane.showMessageDialog(this,
                                                  "Data Saved Successfully");
                } catch (FileNotFoundException ex) {
                } catch (IOException ex) {
                    /** @todo Handle this exception */
                    JOptionPane.showMessageDialog(this, ex.toString());
                }
            } else {
                try {
                    ras.write(txtData.getText().getBytes());
                    JOptionPane.showMessageDialog(this,
                                                  "Data Saved Successfully");
                } catch (IOException ex1) {
                }

            }
        } else {
            JOptionPane.showMessageDialog(this,
                                          "Failure: The data is not valid");
        }
    }

    public void btnClose_actionPerformed(ActionEvent e) {
        dispose();
    }
}


class PicturePattern_btnClose_actionAdapter implements ActionListener {
    private PicturePattern adaptee;
    PicturePattern_btnClose_actionAdapter(PicturePattern adaptee) {
        this.adaptee = adaptee;
    }

    public void actionPerformed(ActionEvent e) {
        adaptee.btnClose_actionPerformed(e);
    }
}


class PicturePattern_btnSave_actionAdapter implements ActionListener {
    private PicturePattern adaptee;
    PicturePattern_btnSave_actionAdapter(PicturePattern adaptee) {
        this.adaptee = adaptee;
    }

    public void actionPerformed(ActionEvent e) {
        adaptee.btnSave_actionPerformed(e);
    }
}


class PicturePattern_btnLoad_actionAdapter implements ActionListener {
    private PicturePattern adaptee;
    PicturePattern_btnLoad_actionAdapter(PicturePattern adaptee) {
        this.adaptee = adaptee;
    }

    public void actionPerformed(ActionEvent e) {
        adaptee.btnLoad_actionPerformed(e);
    }
}


class PicturePattern_btnCheck_actionAdapter implements ActionListener {
    private PicturePattern adaptee;
    PicturePattern_btnCheck_actionAdapter(PicturePattern adaptee) {
        this.adaptee = adaptee;
    }

    public void actionPerformed(ActionEvent e) {
        adaptee.btnCheck_actionPerformed(e);
    }
}


class PicturePattern_btnAdd_actionAdapter implements ActionListener {
    private PicturePattern adaptee;
    PicturePattern_btnAdd_actionAdapter(PicturePattern adaptee) {
        this.adaptee = adaptee;
    }

    public void actionPerformed(ActionEvent e) {
        adaptee.btnAdd_actionPerformed(e);
    }
}
